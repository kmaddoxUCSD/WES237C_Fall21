// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fir_fir,hls_ip_2021_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.923000,HLS_SYN_LAT=4,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=2688,HLS_SYN_LUT=955,HLS_VERSION=2021_1}" *)

module fir (
        ap_clk,
        ap_rst_n,
        y,
        y_ap_vld,
        c_0,
        c_1,
        c_2,
        c_3,
        c_4,
        c_5,
        c_6,
        c_7,
        c_8,
        c_9,
        c_10,
        x,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output  [31:0] y;
output   y_ap_vld;
input  [31:0] c_0;
input  [31:0] c_1;
input  [31:0] c_2;
input  [31:0] c_3;
input  [31:0] c_4;
input  [31:0] c_5;
input  [31:0] c_6;
input  [31:0] c_7;
input  [31:0] c_8;
input  [31:0] c_9;
input  [31:0] c_10;
input  [31:0] x;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

reg y_ap_vld;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg  signed [31:0] shift_reg_9;
reg   [31:0] shift_reg_8;
reg  signed [31:0] shift_reg_7;
reg  signed [31:0] shift_reg_6;
reg  signed [31:0] shift_reg_5;
reg  signed [31:0] shift_reg_4;
reg  signed [31:0] shift_reg_3;
reg   [31:0] shift_reg_2;
reg  signed [31:0] shift_reg_1;
reg  signed [31:0] shift_reg_0;
reg  signed [31:0] data_7_reg_363;
reg  signed [31:0] data_1_reg_394;
wire    ap_CS_fsm_state2;
wire   [31:0] grp_fu_163_p2;
reg   [31:0] mul_ln44_7_reg_455;
wire   [31:0] grp_fu_179_p2;
reg   [31:0] mul_ln44_8_reg_460;
wire   [31:0] grp_fu_191_p2;
reg   [31:0] mul_ln44_9_reg_465;
wire    ap_CS_fsm_state3;
wire   [31:0] grp_fu_211_p2;
reg   [31:0] mul_ln44_1_reg_485;
wire   [31:0] grp_fu_227_p2;
reg   [31:0] mul_ln44_2_reg_490;
wire   [31:0] grp_fu_243_p2;
reg   [31:0] mul_ln44_3_reg_495;
wire   [31:0] grp_fu_259_p2;
reg   [31:0] mul_ln44_4_reg_500;
wire   [31:0] grp_fu_275_p2;
reg   [31:0] mul_ln44_5_reg_505;
wire   [31:0] grp_fu_286_p2;
reg   [31:0] mul_ln44_6_reg_510;
wire   [31:0] add_ln44_7_fu_315_p2;
reg   [31:0] add_ln44_7_reg_515;
wire   [31:0] grp_fu_295_p2;
reg   [31:0] acc_reg_520;
wire    ap_CS_fsm_state4;
wire   [31:0] grp_fu_306_p2;
reg   [31:0] mul_ln44_reg_525;
wire   [31:0] add_ln44_2_fu_324_p2;
reg   [31:0] add_ln44_2_reg_530;
wire   [31:0] add_ln44_8_fu_338_p2;
reg   [31:0] add_ln44_8_reg_535;
wire    ap_CS_fsm_state5;
wire   [31:0] add_ln44_6_fu_311_p2;
wire   [31:0] add_ln44_1_fu_320_p2;
wire   [31:0] add_ln44_4_fu_329_p2;
wire   [31:0] add_ln44_5_fu_333_p2;
wire   [31:0] add_ln44_fu_343_p2;
wire   [31:0] add_ln44_3_fu_347_p2;
reg   [4:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 shift_reg_9 = 32'd0;
#0 shift_reg_8 = 32'd0;
#0 shift_reg_7 = 32'd0;
#0 shift_reg_6 = 32'd0;
#0 shift_reg_5 = 32'd0;
#0 shift_reg_4 = 32'd0;
#0 shift_reg_3 = 32'd0;
#0 shift_reg_2 = 32'd0;
#0 shift_reg_1 = 32'd0;
#0 shift_reg_0 = 32'd0;
end

fir_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

fir_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(c_2),
    .din1(shift_reg_1),
    .ce(1'b1),
    .dout(grp_fu_163_p2)
);

fir_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(c_1),
    .din1(shift_reg_0),
    .ce(1'b1),
    .dout(grp_fu_179_p2)
);

fir_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(c_0),
    .din1(x),
    .ce(1'b1),
    .dout(grp_fu_191_p2)
);

fir_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(c_8),
    .din1(shift_reg_7),
    .ce(1'b1),
    .dout(grp_fu_211_p2)
);

fir_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(c_7),
    .din1(shift_reg_6),
    .ce(1'b1),
    .dout(grp_fu_227_p2)
);

fir_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(c_6),
    .din1(shift_reg_5),
    .ce(1'b1),
    .dout(grp_fu_243_p2)
);

fir_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(c_5),
    .din1(shift_reg_4),
    .ce(1'b1),
    .dout(grp_fu_259_p2)
);

fir_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U8(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(c_4),
    .din1(shift_reg_3),
    .ce(1'b1),
    .dout(grp_fu_275_p2)
);

fir_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U9(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(c_3),
    .din1(data_7_reg_363),
    .ce(1'b1),
    .dout(grp_fu_286_p2)
);

fir_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U10(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(c_10),
    .din1(shift_reg_9),
    .ce(1'b1),
    .dout(grp_fu_295_p2)
);

fir_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U11(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(c_9),
    .din1(data_1_reg_394),
    .ce(1'b1),
    .dout(grp_fu_306_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        acc_reg_520 <= grp_fu_295_p2;
        add_ln44_2_reg_530 <= add_ln44_2_fu_324_p2;
        add_ln44_8_reg_535 <= add_ln44_8_fu_338_p2;
        mul_ln44_reg_525 <= grp_fu_306_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln44_7_reg_515 <= add_ln44_7_fu_315_p2;
        mul_ln44_1_reg_485 <= grp_fu_211_p2;
        mul_ln44_2_reg_490 <= grp_fu_227_p2;
        mul_ln44_3_reg_495 <= grp_fu_243_p2;
        mul_ln44_4_reg_500 <= grp_fu_259_p2;
        mul_ln44_5_reg_505 <= grp_fu_275_p2;
        mul_ln44_6_reg_510 <= grp_fu_286_p2;
        shift_reg_9 <= data_1_reg_394;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        data_1_reg_394 <= shift_reg_8;
        mul_ln44_7_reg_455 <= grp_fu_163_p2;
        mul_ln44_8_reg_460 <= grp_fu_179_p2;
        mul_ln44_9_reg_465 <= grp_fu_191_p2;
        shift_reg_3 <= data_7_reg_363;
        shift_reg_4 <= shift_reg_3;
        shift_reg_5 <= shift_reg_4;
        shift_reg_6 <= shift_reg_5;
        shift_reg_7 <= shift_reg_6;
        shift_reg_8 <= shift_reg_7;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        data_7_reg_363 <= shift_reg_2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        shift_reg_0 <= x;
        shift_reg_1 <= shift_reg_0;
        shift_reg_2 <= shift_reg_1;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        y_ap_vld = 1'b1;
    end else begin
        y_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln44_1_fu_320_p2 = (mul_ln44_2_reg_490 + mul_ln44_3_reg_495);

assign add_ln44_2_fu_324_p2 = (add_ln44_1_fu_320_p2 + mul_ln44_1_reg_485);

assign add_ln44_3_fu_347_p2 = (add_ln44_2_reg_530 + add_ln44_fu_343_p2);

assign add_ln44_4_fu_329_p2 = (mul_ln44_5_reg_505 + mul_ln44_6_reg_510);

assign add_ln44_5_fu_333_p2 = (add_ln44_4_fu_329_p2 + mul_ln44_4_reg_500);

assign add_ln44_6_fu_311_p2 = (mul_ln44_8_reg_460 + mul_ln44_9_reg_465);

assign add_ln44_7_fu_315_p2 = (add_ln44_6_fu_311_p2 + mul_ln44_7_reg_455);

assign add_ln44_8_fu_338_p2 = (add_ln44_7_reg_515 + add_ln44_5_fu_333_p2);

assign add_ln44_fu_343_p2 = (mul_ln44_reg_525 + acc_reg_520);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign y = (add_ln44_8_reg_535 + add_ln44_3_fu_347_p2);

endmodule //fir
